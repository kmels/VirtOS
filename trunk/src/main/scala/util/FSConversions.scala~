package util

private val whitespace:Byte = 32
  private def emptySequence(size:Int):Array[Byte] = ArrayBuffer.fill(size)(whitespace).toArray
  private def now:Long = Calendar.getInstance().getTime.getTime
  private def stringToByteArray(s:String):Array[Byte] = s.toArray.map(_.toByte)
  private def byteArrayToString(a:Array[Byte]) = a.foldLeft("")(_+_.toChar.toString)
  private def byteToString(b:Byte):String = b.toChar.toString
  def assertEquals(m:String,s1:AnyVal,s2:AnyVal) = if (s1!=s2) println("Failed in "+m+", should be: "+s2+", got "+s1)

  def byteFromDigit(d:Int):Byte = d.toString.charAt(0).toByte //Receives a digit and return it's string representation byte e.g. Char 56 would return Byte 8
  def extendToRightString(s:String,requestedSize:Int):String = {
    assert(s.size<=requestedSize)
    var string = s
    for (missing<-1 to requestedSize-s.size)
      string += " "
    assertEquals("extendToRightString",string.size,requestedSize)
    string
  }
  val emptyFCB =  new FileControlBlock(0,".",0,0,0,0,'a',0
